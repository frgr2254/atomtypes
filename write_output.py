#This Python module contain functions for writing output files

def write_output(atom_types,elements,charges,atom_volumes):
    """This function write the assigned atom types to file"""

    outfile = open('output.out','w')
    outfile.write('#element    atom type    net atom charge    atom volume\n')
    for i in range(len(elements)):
        outfile.write(elements[i]+' '+atom_types[i]+' '+str(charges[i])+' '+str(atom_volumes[i])+'\n')
    outfile.close()

    return
    
def write_itp(atom_types,distances,all_bonds,all_types,molname,charges,elements):
    """This function writes a gromacs itp file for the system"""

    mass_file = open('atom_masses.dat','r') #read atom masses from file

    atom_masses = []
    masses_elements = []

    for line in mass_file:
        line_content = line.strip('\n').split()
        masses_elements.append(line_content[0])
        atom_masses.append(line_content[1]) 

    mass_file.close()

    itp_lines = []
    cnt = 1
    for i in range(len(atom_types)):
        if (atom_types[i] != 'Hw') and (atom_types[i] != 'Ow'):
            atom_name = elements[i]+str(cnt)
            space1 = (4-len(str(cnt)))*' '
            space2 = (9-len(atom_types[i]))*' '
            space3 = (7-len('1'))*' '
            space4 = (12-len(molname))*' '
            space5 = (9-len(atom_name))*' '
            space6 = (8-len(str(cnt)))*' '
            space7 = (13-len(format(charges[i],'.5f')))*' '
            for j in range(len(atom_masses)):
                if elements[i] == masses_elements[j]:
                    #space8 = (8-len(str(atom_masses[j])))*' '
                    mass = format(float(atom_masses[j]),'.5f')
            itp_lines.append(space1+str(cnt)+space2+atom_types[i]+space3+'1'+space4+molname+space5+atom_name+space6+str(cnt)+space7+format(charges[i],'.5f')+'  '+mass+'\n')
            cnt += 1

    #create bond section in itp file
    bonded_pairs = []

    for bond in all_bonds:
        for i in range(len(distances[0])):
            for j in range(i+1,len(distances[0])):
                if bond[0] == atom_types[i] and bond[1] == atom_types[j] and distances[i][j] <= float(bond[2]):
                    space1 = (3-len(str(i+1)))*' '
                    space2 = (10-len(str(j+1)))*' '
                    space3 = 6*' '
                    bonded_pairs.append(space1+str(i+1)+space2+str(j+1)+space3+'1\n')
                elif bond[0] == atom_types[j] and bond[1] == atom_types[i] and distances[i][j] <= float(bond[2]):
                    space1 = (3-len(str(i+1)))*' '
                    space2 = (10-len(str(j+1)))*' '
                    space3 = 6*' '
                    bonded_pairs.append(space1+str(i+1)+space2+str(j+1)+space3+'1\n')



    itp_file = open('{}.itp'.format(molname),'w') #open itp file to write

    itp_file.write('[ moleculetype ]\n') 
    itp_file.write('; molname            nrexcl\n')
    itp_file.write('{}            1\n'.format(molname))
    itp_file.write('\n')
    itp_file.write('[ atoms ]\n')
    itp_file.write(';  nr      atype     resnr   resname  atname    cgnr     NAC      mass    desc\n')

    for x in itp_lines:
        itp_file.write(x)
    
    itp_file.write('\n[ bonds ]\n')
    itp_file.write(';  i        j        func    desc\n')
    for y in bonded_pairs:
        itp_file.write(y)


    itp_file.close()

    return 


    def write_pdb(atom_types,elements,r,boxx,boxy,boxz):
        """This function writes a pdb file containing the assiged atom types"""

        pdb_file = open('output.pdb','w')

        pdb_file.write('TITLE     This is a PDB file generated by the Atomtypes code with the same format as gmx trjconv\n')
        pdb_file.write('REMARK    THIS IS A SIMULATION BOX\n')
        boxx_3dec = format(boxx,'.3f')
        boxy_3dec = format(boxy,'.3f')
        boxz_3dec = format(boxz,'.3f')

        pdb_file.write('CRYST1   {}   {}   {}  90.00  90.00  90.00 P 1           1\n'.format(boxx_3dec,boxy_3dec,boxz_3dec))
        pdb_file.write('MODEL        1\n')

        cnt = 0
        for i in range(len(r)):
            space1 = (5-len(cnt))*' '
            space2 = (4-len(atom_types[i]))*' '
            space3 = 5*' '
            x_3dec = format(r[i][0],'.3f')
            space4 = (12-len(x_3dec))*' '
            y_3dec = format(r[i][1],'.3f')
            space5 = (8-len(y_3dec))*' '
            z_3dec = format(r[i][2],'.3f')
            space6 = (8-len(z_3dec))*' '
            space7 = (12-len(str(elements[i])))*' '
            if (atom_types[i] == 'Hw') or (atom_types[i] == 'Ow'):
                residue = 'SOL'
            else: residue = 'LIG'
            line = 'ATOM'+space1+str(cnt)+'  '+atom_types[i]+space2+residue+space3+'1'+space4+x_3dec+space5+y_3dec+space6+z_3dec+'  1.00  0.00'+space7+elements[i]
            pdb_file.write(line)
            cnt += 1


        pdb_file.close()

        return


